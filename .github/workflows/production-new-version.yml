name: Production Release With Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (optional)"
        required: false
        default: ""
      confirm:
        type: boolean
        required: true
        default: false
        description: Yes, I want to release.

jobs:
  confirm:
    name: Confirm publish
    runs-on: ubuntu-latest
    steps:
      - name: Confirm
        if: ${{ github.event.inputs.confirm != 'true' }}
        run: |
          echo "Please confirm that you want to release"
          exit 1

  set-version:
    name: Set version
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.get_build_version.outputs.build_version }}
    needs:
      - confirm

    steps:
      - name: ⇣ Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_BUILDER_TOKEN }}

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set version
        run: |
          set -e
          OLD_VERSION="$(./gradlew -q currentVersion)"
          NEW_VERSION="${{ github.event.inputs.version }}"
          if [ -z "$NEW_VERSION" ]; then
            NEW_VERSION=$(echo $OLD_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g' )
          fi
          sed -i "s/project\.externalVersion : '.*\..*\..*'/project\.externalVersion : '$NEW_VERSION'/g" build.gradle

      - name: Get Version
        id: get_build_version
        run: |
          VERSION="$(./gradlew -q currentVersion)"
          echo "new version is $VERSION"
          echo "build_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup git
        run: |
          set -ex
          git config --global user.email "builder+skip-ci@codota.com"
          git config --global user.name "codota-builder"

      - name: Commit changes
        run: |
          NEW_VERSION="${{ steps.get_build_version.outputs.build_version }}"
          git pull origin master --no-edit
          git commit -am "Set version to $NEW_VERSION"
          git push
          git tag v$NEW_VERSION
          git push origin v$NEW_VERSION

  publish-production:
    name: Publish to PRODUCTION
    runs-on: ubuntu-latest
    needs:
      - set-version

    steps:
      - name: ⇣ Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_BUILDER_TOKEN }}

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        name: Cache Gradle packages
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Publish production plugin
        run: |
          ./gradlew publishPlugin -PexternalVersion=${{ needs.set-version.outputs.build_version }} -Pchannel=production
        env:
          HUB_TOKEN: ${{ secrets.HUB_TOKEN }}

      - name: Get Plugin Path
        id: get_plugin_path
        run: echo "pluginPath=$(ls -t build/distributions/TabNine-*.zip | head -1)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.set-version.outputs.build_version }}
          release_name: v${{ needs.set-version.outputs.build_version }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_plugin_path.outputs.plugin_path }}
          asset_name: TabNine.zip
          asset_content_type: application/zip

  publish-self-hosted:
    name: Publish self hosted
    runs-on: ubuntu-latest
    needs:
      - set-version

    steps:
      - name: ⇣ Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_BUILDER_TOKEN }}

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        name: Cache Gradle packages
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Get Version
        id: get_build_version
        run: |
          VERSION="$(./gradlew -q currentVersion)"
          echo "new version is $VERSION"
          echo "build_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish production plugin
        run: |
          ./gradlew publishPlugin -PexternalVersion=${{ needs.set-version.outputs.build_version }} -Pchannel=onprem
        env:
          HUB_TOKEN: ${{ secrets.HUB_TOKEN }}

      - name: Get Plugin Path
        id: get_plugin_path
        run: echo "pluginPath=$(ls -t build/distributions/TabNine-*.zip | head -1)" >> $GITHUB_OUTPUT

      - name: Set stable version file
        run: |
          echo -n ${{ needs.set-version.outputs.build_version }} > stable

      - name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.GCS_RELEASE_KEY }}

      - name: ⬆️ Upload latest stable version to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: stable
          destination: tabnine-self-hosted-artifacts/jetbrains

      - name: ⬆️ Upload zip to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ${{ needs.set-version.outputs.build_version }}
          destination: tabnine-self-hosted-artifacts/jetbrains/TabNine-${{ needs.set-version.outputs.build_version }}.zip
