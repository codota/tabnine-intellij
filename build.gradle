plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.4.32"
    id 'org.jetbrains.intellij' version '1.1.3'
    id 'org.jlleitschuh.gradle.ktlint' version "10.0.0"
    id 'org.jlleitschuh.gradle.ktlint-idea' version "10.0.0"
}

group 'com.tabnine'
version project.hasProperty('externalVersion') ? project.externalVersion : '0.4.5'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

apply plugin: "org.jlleitschuh.gradle.ktlint-idea"

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.32")
    implementation('io.sentry:sentry:4.3.0')

    testCompile("org.hamcrest:hamcrest:2.2")
    testCompile "org.mockito:mockito-core:3.5.+"
    testCompile "org.mockito:mockito-junit-jupiter:3.5.+"
    testCompile("com.github.tomakehurst:wiremock-jre8:2.27.2")
    testImplementation "io.mockk:mockk:1.11.0"
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.7.1")
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
    }
}

intellij {
    version '2019.3'
    type 'IC'
    updateSinceUntilBuild false
}

def PRODUCTION_CHANNEL = null
def channelName = project.hasProperty('channel') ? project.channel : 'alpha'
def publishChannel = channelName == "production" ? PRODUCTION_CHANNEL : channelName

sourceSets {
    main {
        java.srcDirs += "channels/${channelName}"
    }
}

def hubToken = project.hasProperty('hubToken') ? hubToken : (System.getenv('HUB_TOKEN'))

publishPlugin {
    if (publishChannel != PRODUCTION_CHANNEL) {
        channels publishChannel
    }
    token hubToken
}

tasks.create("currentVersion") {
    doLast {
        println version
    }
}

tasks.getByName("runIde").configure {
    if (project.hasProperty('logFilePath')) {
        systemProperty("TABNINE_LOG_FILE_PATH", logFilePath)
    }
}

task createProperty(type: WriteProperties) {
    def sentryDsn =  System.getenv('SENTRY_DSN') ?: ""
    if (publishChannel == PRODUCTION_CHANNEL && !sentryDsn) {
        throw new GradleException("Please set the  SENTRY_DSN environment variable")
    }
    def resourcesDir = sourceSets.main.output.resourcesDir
    property 'dsn', sentryDsn
    outputFile file("${resourcesDir}/sentry.properties")
}

tasks {
    build {
        dependsOn(addKtlintFormatGitPreCommitHook)
    }

    processResources {
        dependsOn(createProperty)
    }

    compileKotlin {
        dependsOn(ktlintFormat)
    }
}