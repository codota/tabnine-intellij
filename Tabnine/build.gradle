import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.util.stream.Collectors

plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.4.32"
    id 'org.jetbrains.intellij' version '1.13.3'
    id 'org.jlleitschuh.gradle.ktlint' version "10.0.0"
    id 'org.jlleitschuh.gradle.ktlint-idea' version "10.0.0"
    id "com.github.sherter.google-java-format" version "0.9"
}

repositories {
    mavenCentral()
}

group 'com.tabnine'
version project.hasProperty('externalVersion') ? project.externalVersion : '1.0.6'

sourceCompatibility = 9
targetCompatibility = 9

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "9"
    }
}

repositories {
    mavenCentral()
}

apply plugin: "org.jlleitschuh.gradle.ktlint-idea"

dependencies {
    implementation project(':Common')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.32")
}

intellij {
    version = '2019.3'
    type = 'IC'
    updateSinceUntilBuild = false
}

def PRODUCTION_CHANNEL = null
def channelName = project.hasProperty('channel') ? project.channel : 'alpha'
def publishChannel = channelName == "production" ? PRODUCTION_CHANNEL : channelName

sourceSets {
    main {
        java.srcDirs += "../channels/${channelName}"
    }
}

def hubToken = project.hasProperty('hubToken') ? hubToken : (System.getenv('HUB_TOKEN'))

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
    }
}

publishPlugin {
    if (publishChannel != PRODUCTION_CHANNEL) {
        channels = [publishChannel]
    }
    token = hubToken
}

tasks.create("currentVersion") {
    doLast {
        println version
    }
}

tasks.getByName("runIde").configure {
    if (project.hasProperty('logFilePath')) {
        systemProperty("TABNINE_LOG_FILE_PATH", logFilePath)
    }
}

tasks {
    compileKotlin {
        dependsOn(ktlintFormat)
    }
}

static def getIdeVersions(Project project) {
    def ideVersions = project.hasProperty('ideVersions') ?
            Arrays.asList(project.ideVersions.split(',')) :
            ['IC-2019.3.5']
    return ideVersions
}

runPluginVerifier {
    ideVersions = getIdeVersions(project)
    if (project.hasProperty("localPaths")) {
        localPaths = Arrays.stream(project.localPaths.split(',')).map(File::new).collect(Collectors.toList())
    }
}